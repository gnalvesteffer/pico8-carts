pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
tile_size=10
cursor_x=4
cursor_y=4
selected_x=nil
selected_y=nil
input={}
grid={}

function clamp(a,b,c)
	if a < b then
		return b
	end
	if a > c then
		return c
	end
	return a
end

function draw_board()
	for x=0,8 do
		for y=0,8 do
			local sprite=1
			if x==0 or x==8 or y==0 or y==8 then
				sprite=3
			elseif x==4 and y==4 then
				sprite=5
			end
			spr(
				sprite,
				x*tile_size-x,
				y*tile_size-y,
				2,
				2
			)
			
			draw_piece(
				grid[x][y],
				x,
				y
			)
		end
	end
	
	--draw cursor
	draw_piece(32,cursor_x,cursor_y)

 --draw selected
 draw_piece(34,selected_x,selected_y)
end

function draw_piece(
	sprite,
	x,
	y
)
	if sprite==nil or x==nil or y==nil then
		return
	end
	spr(
		sprite,
		x*tile_size-x,
		y*tile_size-y,
		2,
		2
	)
end

function update_valid_moves()
	--clear previous moves
	for x=0,8 do
		for y=0,8 do
			if grid[x][y]==13 then
				grid[x][y]=nil
			end
		end
	end
	
	--show valid moves
	if selected_x~=nil and selected_y~=nil then

	end
end

function update_input()
	for i=0,5 do
		input[i].pressed=false
		local prev_down=input[i].down
		if btn(i,0) then
			input[i].down=true
		else
			input[i].down=false
			if prev_down then
				input[i].pressed=true
			end
		end
	end
end

function update_cursor()
	if input[4].pressed then
		if cursor_x==selected_x and cursor_y==selected_y then
			selected_x=nil
			selected_y=nil
		else
			selected_x=cursor_x
			selected_y=cursor_y
		end
	end

	if input[0].pressed then
		cursor_x-=1
	end
	if input[1].pressed then
		cursor_x+=1
	end
	if input[2].pressed then
		cursor_y-=1
	end
	if input[3].pressed then
		cursor_y+=1
	end
	cursor_x=clamp(cursor_x,0,8)
	cursor_y=clamp(cursor_y,0,8)
end

function _update()
	update_valid_moves()
	update_input()
	update_cursor()
end

function _init()
	--init input
	for i=0,5 do
		input[i]={}
		input[i].down=false
		input[i].pressed=false
	end
	
	--init grid
	for x=0,8 do
		grid[x]={}
		for y=0,8 do
			grid[x][y]=nil
		end
	end
	
	--left attackers
	grid[0][3]=11
	grid[0][4]=11
	grid[0][5]=11
	grid[1][4]=11
	
	--top attackers
	grid[3][0]=11
	grid[4][0]=11
	grid[5][0]=11
	grid[4][1]=11
	
	--right attackers
	grid[8][3]=11
	grid[8][4]=11
	grid[8][5]=11
	grid[7][4]=11
	
	--top attackers
	grid[3][8]=11
	grid[4][8]=11
	grid[5][8]=11
	grid[4][7]=11
	
	--defenders
	grid[2][4]=7
	grid[3][4]=7
	grid[4][4]=9
	grid[5][4]=7
	grid[6][4]=7
	grid[4][2]=7
	grid[4][3]=7
	grid[4][5]=7
	grid[4][6]=7
end

function _draw()
	cls()
	draw_board()
end
__gfx__
00000000200000000200000020000000020000002000000002000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001111110000000000333333000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700010000001000000003000000300000000400000040000000000000000000000000000000000000000000000000000000000000000000000000000000
0007700001000000100000000300000030000000040000004000000000007700000000000000aa00000000000000dd0000000000000000000000000000000000
000770000100000010000000030000003000000004000000400000000007777000000000000aaaa000000000000dddd0000000000000cc000000000000000000
0070070001000000100000000300000030000000040000004000000000067760000000000004aa40000000000005dd50000000000000cc000000000000000000
00000000010000001000000003000000300000000400000040000000000066000000000000004400000000000000550000000000000000000000000000000000
00000000010000001000000003000000300000000400000040000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001111110000000000333333000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000200000000200000020000000020000002000000002000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e80000008e0000007c000000c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000008000000c00000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000008000000c00000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e80000008e0000007c000000c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
