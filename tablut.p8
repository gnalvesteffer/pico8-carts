pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
debug=""
tile_size=10
cursor_x=4
cursor_y=4
selected_x=nil
selected_y=nil
input={}
grid={}
is_defender_turn=false
did_defenders_win=nil --true if defenders won, false if attackers won, nil if game is still active
win_cinematic_tick=0

function draw_board()
	--border
	rect(-2,-2,83,83,1)
	
	for x=0,8 do
		for y=0,8 do
			local sprite=1
			if x==0 or x==8 or y==0 or y==8 then
				sprite=3
			elseif x==4 and y==4 then
				sprite=5
			end
			spr(
				sprite,
				x*tile_size-x,
				y*tile_size-y,
				2,
				2
			)
			
			draw_piece(
				grid[x][y],
				x,
				y
			)
		end
	end
	
	local cursor_sprite=32
	if is_defender_turn then
		cursor_sprite=34
	end
	
	--draw cursor
	draw_piece(cursor_sprite,cursor_x,cursor_y)
end

function draw_piece(
	sprite,
	x,
	y
)
	if sprite==nil or x==nil or y==nil then
		return
	end
	spr(
		sprite,
		x*tile_size-x,
		y*tile_size-y,
		2,
		2
	)
end

function update_valid_moves()
	--clear previous moves
	for x=0,8 do
		for y=0,8 do
			if grid[x][y]==13 then
				grid[x][y]=nil
			end
		end
	end
	
	--show valid moves
	if selected_x~=nil and selected_y~=nil then
		local selected_piece=grid[selected_x][selected_y]
		if selected_piece==7 or selected_piece==9 or selected_piece==11 then
			--check to the right
			for x=selected_x+1,8 do
				if grid[x][selected_y]==7 or grid[x][selected_y]==9 or grid[x][selected_y]==11 then
					break
				end
				grid[x][selected_y]=13
			end
			--check to the left
			for x=selected_x-1,0,-1 do
				if grid[x][selected_y]==7 or grid[x][selected_y]==9 or grid[x][selected_y]==11 then
					break
				end
				grid[x][selected_y]=13
			end
			--check to the top
			for y=selected_y-1,0,-1 do
				if grid[selected_x][y]==7 or grid[selected_x][y]==9 or grid[selected_x][y]==11 then
					break
				end
				grid[selected_x][y]=13
			end
			--check to the bottom
			for y=selected_y+1,8 do
				if grid[selected_x][y]==7 or grid[selected_x][y]==9 or grid[selected_x][y]==11 then
					break
				end
				grid[selected_x][y]=13
			end
		end
	end
end

function update_input()
	for i=0,5 do
		input[i].pressed=false
		input[i].released=false
		local prev_down=input[i].down
		if btn(i,0) then
			input[i].down=true
			if not prev_down then
				input[i].pressed=true
			end
		else
			input[i].down=false
			if prev_down then
				input[i].released=true
			end
		end
	end
end

function is_defense(sprite)
	return sprite==7 or sprite==9
end

function can_kill(
	attacker1_x,
	attacker1_y,
	victim_x,
	victim_y,
	attacker2_x,
	attacker2_y
)
	if attacker1_x<0 or attacker1_x>8 or
			 attacker1_y<0 or attacker1_y>8 or
			 victim_x<0 or victim_x>8 or
			 victim_y<0 or victim_y>8 or
			 attacker2_x<0 or attacker2_x>8 or
			 attacker2_y<0 or attacker2_y>8 then
		return false		 
	end
	local attacker1=grid[attacker1_x][attacker1_y]
	local victim=grid[victim_x][victim_y]
	local attacker2=grid[attacker2_x][attacker2_y]
	if attacker1==nil or victim==nil or attacker2==nil then
		return false
	end
	local are_attackers_teamed=is_defense(attacker1)==is_defense(attacker2)
	local is_victim_enemy=is_defense(victim)~=is_defense(attacker1)
 return are_attackers_teamed and is_victim_enemy
end

function kill(x,y)
	local is_king=grid[x][y]==9
	grid[x][y]=nil
	sfx(1)
	if is_king then
		on_attacker_win()
	end
end

function draw_win_cinematic()
	local text="attackers win"
	if did_defenders_win==true then
		text="defenders win"
		sspr(0,32,64,64,0,0,128,128)
	else
		sspr(64,32,64,64,0,0,128,128)
	end
	rectfill(0,59,128,68,13)
	printfx(text,hcenter(text),vcenter(text),7)
	
	--black bars
	--rectfill(0,0,128,20,1)
	--rectfill(0,128,128,128-20,1)
end

function on_defender_win()
	sfx(2)
	did_defenders_win=true
end

function on_attacker_win()
	sfx(3)
	did_defenders_win=false
end

function on_pawn_moved(x,y)
 sfx(0)

	--check left
	if can_kill(x,y,x-1,y,x-2,y) then
		kill(x-1,y)
	end
	--check right
	if can_kill(x,y,x+1,y,x+2,y) then
		kill(x+1,y)
	end
	--check up
	if can_kill(x,y,x,y-1,x,y-2) then
		kill(x,y-1)
	end
	--check down
	if can_kill(x,y,x,y+1,x,y+2) then
		kill(x,y+1)
	end
	
	is_defender_turn=not is_defender_turn
	
	local pawn=grid[x][y]
	if pawn==9 and (x==0 or x==8 or y==0 or y==8) then --is king
		on_defender_win()
	end
end

function on_selection_changed(
	prev_x,
	prev_y
)
	--piece move logic
	if selected_x~=nil and selected_y~=nil and prev_x~=nil and prev_y~=nil then
		local prev_piece=grid[prev_x][prev_y]
		local cur_piece=grid[selected_x][selected_y]
		if prev_piece==7 or prev_piece==9 or prev_piece==11 then			
			--check if selecting valid move position
			if cur_piece==13 then
				grid[selected_x][selected_y]=prev_piece
				grid[prev_x][prev_y]=nil
				on_pawn_moved(selected_x,selected_y)
				selected_x=nil
				selected_y=nil
				return
			end
		end
	end
	
	--play generic sound
	sfx(6)
end

function can_select(x,y)
	local piece=grid[x][y]
	if piece==nil then
		return false
	end
	if piece==13 then
		return true
	end
	local is_defender=is_defense(piece)
	return (is_defender_turn and is_defender) or (not is_defender_turn and not is_defender)
end

function update_cursor()
	if input[4].pressed then --select
		local prev_selected_x=selected_x
		local prev_selected_y=selected_y
		if cursor_x==selected_x and cursor_y==selected_y then
			selected_x=nil
			selected_y=nil
		elseif can_select(cursor_x,cursor_y) then
			selected_x=cursor_x
			selected_y=cursor_y
		end
		on_selection_changed(
			prev_selected_x,
			prev_selected_y
		)
	end

	local move_sound=4
	if is_defender_turn then
		move_sound=5
	end
	if input[0].pressed then
		cursor_x-=1
		sfx(move_sound)
	end
	if input[1].pressed then
		cursor_x+=1
		sfx(move_sound)
	end
	if input[2].pressed then
		cursor_y-=1
		sfx(move_sound)
	end
	if input[3].pressed then
		cursor_y+=1
		sfx(move_sound)
	end
	cursor_x=clamp(cursor_x,0,8)
	cursor_y=clamp(cursor_y,0,8)
end

function update_win_cinematic()
	if win_cinematic_tick==30*5 then
		_init() --restart
	end
	win_cinematic_tick+=1
end

function _update()
	if did_defenders_win~=nil then
		update_win_cinematic()
	else
		update_valid_moves()
		update_input()
		update_cursor()
	end
end

function _init()
	--init input
	cursor_x=4
	cursor_y=4
	selected_x=nil
	selected_y=nil
	for i=0,5 do
		input[i]={}
		input[i].down=false
		input[i].pressed=false
		input[i].released=false
	end
	
	--reset turn
	is_defender_turn=false
	
	--reset win
	did_defenders_win=nil
	win_cinematic_tick=0
	
	--init grid
	for x=0,8 do
		grid[x]={}
		for y=0,8 do
			grid[x][y]=nil
		end
	end
	
	--left attackers
	grid[0][3]=11
	grid[0][4]=11
	grid[0][5]=11
	grid[1][4]=11
	
	--top attackers
	grid[3][0]=11
	grid[4][0]=11
	grid[5][0]=11
	grid[4][1]=11
	
	--right attackers
	grid[8][3]=11
	grid[8][4]=11
	grid[8][5]=11
	grid[7][4]=11
	
	--top attackers
	grid[3][8]=11
	grid[4][8]=11
	grid[5][8]=11
	grid[4][7]=11
	
	--defenders
	grid[2][4]=7
	grid[3][4]=7
	grid[4][4]=9
	grid[5][4]=7
	grid[6][4]=7
	grid[4][2]=7
	grid[4][3]=7
	grid[4][5]=7
	grid[4][6]=7
end

function centertext(text, x1, y1, x2, y2)
  -- calculate box width and height including borders
  local box_w = x2 - x1 + 1
  local box_h = y2 - y1 + 1

  -- get text width (assuming each character is 3 pixels wide)
  local text_w = #text * 3

  -- calculate x coordinate for centering
  local center_x = x1 + (box_w - text_w) / 2

  -- get text height (assuming each character is 5 pixels high)
  local text_h = 5

  -- calculate y coordinate for centering (adjust based on desired alignment)
  local center_y = y1 + (box_h - text_h) / 2  -- centered vertically

  -- return x and y coordinates
  return center_x, center_y
end

function printfx(str,x,y,col)
	print(str,x+1,y+1,0) --shadow
	print(str,x,y,col)
end

function draw_ui()
	print(debug)
	
	local team_color=8
	if is_defender_turn then
		team_color=12
	end
	
	--bottom bar
	rectfill(0,128,128,128-20,1)
	line(0,128-21,128,128-21,team_color)
	
	--current team
	if is_defender_turn then
		printfx("defender's turn",64,128-12,team_color)
	else
		printfx("attacker's turn",64,128-12,team_color)
	end
end

function _draw()
	cls()
	
	if did_defenders_win~=nil then
		draw_win_cinematic()
	else
		--center board
		camera(-4.5*tile_size/2,-10)
		draw_board()
		
		--recenter ui
		camera(0,0)
		draw_ui()
	end
end
-->8
function hcenter(s)
  -- screen center minus the
  -- string length times the 
  -- pixels in a char's width,
  -- cut in half
  return 64-#s*2
end

function vcenter(s)
  -- screen center minus the
  -- string height in pixels,
  -- cut in half
  return 61
end

function clamp(a,b,c)
	if a < b then
		return b
	end
	if a > c then
		return c
	end
	return a
end
__gfx__
00000000200000000200000020000000020000002000000002000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001111110000000000333333000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700010000001000000003000000300000000400000040000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000100000010000000030000003000000004000000400000000000cc00000000000000a900000000000000880000000000000000000000000000000000
00077000010000001000000003000000300000000400000040000000000cccc000000000000cccc0000000000008888000000000000067000000000000000000
007007000100000010000000030000003000000004000000400000000001cc10000000000001cc10000000000002882000000000000015000000000000000000
00000000010000001000000003000000300000000400000040000000000011000000000000001100000000000000220000000000000000000000000000000000
00000000010000001000000003000000300000000400000040000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001111110000000000333333000000000044444400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000200000000200000020000000020000002000000002000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e80000008e0000007c000000c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000008000000c00000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8000000008000000c00000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
e80000008e0000007c000000c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000110000000000000000001111111111111111111111111111100000000000000000000000001111111111
00000000000000000000000000000000000000000000101100000000000000000000000000000000001111111111111100000000000000000000000000000000
00000000000000000000000000000000000000000000001100000000000000000000000000000000001111111111111100000000000000000000000000000000
00000000000000000000000000000000000001000000001100000000000000001111111111111111111111111111111111111111111000000000000000000000
000000110000000000000000000000000000000100000011000010000000000011111111111111111111111000000000b0000001111111111111111111111111
000000110001000000000000110000000000000100001011010010000000000010000000000000111111b110bb000bbbb0b00001111111111111111111111111
000000110001000000010000110000000000000000001111111010000010000000000000000000003333333bb3bb1111b1b11111111111111333331111111111
000000310001000000000000000000001100000000011133111010011010000000000000000000333333333311111111111111111111111333b3b3b333b11111
00000011000100000000100000000000010011010001113b111000011010000000000000011113b3bb333331111111111111111111111111333bbbbbbbbbbb33
0000001100011000000111000000000001001101100113331101100111110000000000001111113bb3b333331111111111111111111b111333bbbbbbbbbbbbb3
000000110001000000011100001000000110110130011133110110011111100011111111111b13333333bbbb3333111111111111111333b333bbbbbbbbbbbb33
00010111000010000001310000100000010011031001113311111001111110001111b11bbb3333333333bbbb33333333333333333333333333bbb33331111111
00010311011000000001310000010010010011033001133311111001111110003333333b3bbbbbbbbbbbbbbbb333333333333333333333bbbbbb311111111111
0001101131110000300111100000001111010003300113b3111000111111100033333333bbbbb33333333333333333999933339993333bbbbbbbb11111111111
0000031131110000300131100000001111010003310103b31113111111111000bbb3bbb33b333b333b993339933339999993329999333bbbbbbb111111111111
0000001113110010010111100000001111100001110113b31110013113310000b133333333333333399933999933399999933999993333333333111111111111
0301000011100010110111000011001111101001110113b31110013010110000b11113b333333333999993999933399999933999993339933333311111111111
0113010031010111110313003000000311000110010133331110013011011000b111111333333933994493999444449999999999993399993333333311111111
01110100110003133101000000000031110001301101333311110130111110101b1111113333999394444944444444499299999993339999333b333111111111
011101011000011330333001033301110110013133013b31111103311331100111111b1133339993944442444244444444444444949999993393333111111111
01310001130001100b3b3311133111111130011033013333101331101311b0111111111133339993944444224444444444444444449499493999333311111111
01310001b00003103bbb311111113311011031113331333330133111303100111111111133339999442444212414444414441144444499493999333333311111
0113100110000310333b331101111133000020311133131110133113b300111111111113333999944424444222222222122224444444499939993b3333333333
01111001303001133333310011311333110000313133333331133133b30111101111b333333999944224222221212222221224414444444939993333b3333333
0111103b33330110333331000330113331000031113333333111111b330111111111333333339994422122222222222222222444444444449992333333333bb3
01313333333001103b3331100100010330000011113333111131133b33133111111133333339999444441122112122121222411233444444999233333b3bbbb3
011113333311b0003333311101100000000000000111131113313333b3133111111113333339999442241131111211112131311111144444999933333333bbbb
11111333331100033333331103141121000000311111130001133b3b33333111111111113331999912111131331131221233121311999444999933333333bbbb
111113b3311100333333b31023141000000000131110130001133333331332111111111113319994111111111111132111132232329993449992333333333333
11111331111101333333311132241000000000033131113331333333b31333311111b11bb3319991119311111111333311133993339999449228000333333331
1141133b11113333333333213344110000000000033111b33133333333133110111113bbbb119999119131131131331331339999339999999890000333333311
1121131113313313311333334441400000000000033111333133233b301211103333333bbb319991999991399333991333331999339999898820000003333311
12411332423133111311111144224000000000033311001334332333401311103333333333319991999991991133999333139999339998889820000000b33331
11431331413333233333111224220020000000003111001333331413111111313333333333319999999991999931999933119999339998289890000000033333
12431334421133011142110024244120000000030333001333334414431421113333333333319999999911999931999933339999393998289228000000bb3333
11413332113133111022100024234120000000030000001b33322414411323313333333333319999999991999999999933339999999998289880000000bbb333
1331333431111103112311004420002000000000000001133432441441133331333bb33334319999999999999999999933999999999928282980000000bb3333
132443324213311111421110342000000000000300000013344111142111114133bbbb3333319999999999a99993999999999999999998282890000200bb3333
4223433112111133004311111010100000000000000000011441011003113141333bb33333391999999999999a99999999999999999992222890000000bb3333
4144433111311111214211133100010000000000000000013342120123111241bb3b443334399949999999499999999999999999aaaaa2229202000333bb3323
41144331111111111012110330000000000000000000131104421101211111413333333444399449999999999999999999999aa9aaa7a28220222002223b3333
4112433111011110000001111010100000000000000000000000101110111101333bb33434444949999999999999499aa9997a999aaa2992200000002233b323
11111111110100000000000000000000000000000000000000001100000011413333333344441444999999999a99999aa9aa7aa99aaaa29a9002000022222233
11001111111000000000003300000000000000000000000000001000000001423333333341444434149999999999aa9979aa7a9999aa99449080822228bb2223
11111313000033000000000000000000000000000000000000111100000011413333333334114339144999999999aa9aa9aa7a9999aa99999000228882b2b233
111113010001110000000000003200022000044441110011101133311111114200000033333313339911979999979a9aa9aaaa9999aa999420002288833bb333
111111010101111010100100200100013110010033000031133310111111111300000000b0333333399999991a499aaa79aa7a9999994444444002223333b333
11111111111111114440404444440004449449004444033310331111111111110000000000b3bbb33319919444499aaaa9aa1a9999884488844033333333bb33
111111333333333334442223243311134004499444493b3411111010333331110000003333333333343399999999a7a9979aa888888834833333333333bbbbbb
3333333313311b113b00311113291012222222000242333333b333333333113300000003334444344444444444144444444993383333222288888888333333bb
333333333315133314414444112244400000000000221433333b3333131113310000000333333444444444444444444444438388832222288888088883333333
3335bbb3b33511111422222222222222244244422221113333444444443333330000003333333444444444444444444433333388800000088808828828383388
33bbbbbbb311b1122222225224544222222244442224444433354444453333550000000333333334444444444444444331338883883333333222323333333333
b3313333bbb443332522222244444444244445444443343bbb33b333bb3333330000000003333333333333333333332332233888888888828888444444433300
3b333222222222222245544444444222222222444443222222bbbbbbbbbbbbbb0000000000000003333333333333338888838822228882222288884444433000
3333222222224444244444452225522252242244442222222222bbbbbbbbbbbb0000000000000000333333888888888888888822228888888888883333333000
bbbbb2222222222244994444444444444444449944444244442bbbbbbbbbbbbb0000000000000000333333888888888888888888888888222222888833333300
bbbbb22222222222444444449949444944444444942222222222bbbbbbbbbbbb000000000000000bbb3333222222222288882222282288822282823330000000
bbbbb33353225555555444445444444444444444449999222222223bbbbbbbbb0000000000000033333333232222222888882222888888888888833300000000
bbbbbb444422555222444444444444444499444454555555522222222223bbb3000000000bb00b33333333322222222232222222833222223333333330000000
bbbbbbb2244455554444224444444444444444449455555555222233333bbbbb00bb0bbb0033333b33b3bb333333333333333333333333333333333333330000
bbbbbb222222222224444444444444444444444444455555552222233333bbbb00000000300000000000000000000000000033333bbbb333b333330000000000
bbbbb2222224444444444444444444444444444444444444422222244443bbb3000000000000000000000000000000000000003333b333bb33333bbb00000000
bb444444444444444444444444444444444444444444444443222233b33333330000000000000000000000000000000000003333333333333333333330000000
__sfx__
0001000022350000000000000000000002e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400001b7000e6502d1200d3200a320073101b600000001a2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0008000025220002002522000000252302c2300000000000162001e2001e2401e2101e21000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000800001c4302e30022420284301c400000002242023400284302842028420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000d76000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000d55000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00040000112101f2201f6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
